#lang racket

(require "etapa1.rkt")


; ignorați următoarele linii de cod...
(define show-defaults 999) ; câte exerciții la care s-au întors rezultate default să fie arătate detaliat
(define prepend #t) (define nopoints #f) (define name-ex '(testul testele trecut capitolul))
(define default-results `(#f 0 () your-code-here)) (define (default-result r) (set! default-results (cons r default-results))) (define : 'separator) (define punct 'string) (define puncte 'string) (define BONUS 'string) (define exerciții 'string)
(define total 0) (define all '()) (define n-ex 0) (define p-ex 0) (define n-exercs -1) (define default-returns '()) (define (ex n sep p . s) (set! n-ex n) (set! p-ex p) (set! all (cons (list n p) all))) (define exercițiul ex) (define (sunt n s) (set! n-exercs n)) (define s-a string-append)
(define (p . L) (map (λ (e) (display e) (when (> (string-length (format "~a" e)) 0) (display " "))) L) (newline)) (define (p-n-ex) (format "[~a]" (if nopoints (string-join (list (symbol->string (cadddr name-ex)) (number->string n-ex) "/" (number->string n-exercs))) n-ex)))
(define (epart ep% pfix full) (if (< (caddr ep%) 1) (s-a pfix (if full "" (s-a (symbol->string (car name-ex)) " ")) (if (and nopoints (not full)) "" (number->string n-ex)) (symbol->string (cadr ep%))) (if (and nopoints (not full)) "" (s-a pfix (if full "" (s-a (symbol->string (car name-ex)) " ")) (number->string n-ex)))))
(define (whengood ep%) (let [(pts (* p-ex (caddr ep%)))] (and (if prepend (printf "+~v: " pts) (printf "~a[OK] " (p-n-ex))) (if nopoints (p (epart ep% "" #f) "rezolvat") (p (epart ep% "" #f) "rezolvat: +" pts (if (= pts 1) 'punct 'puncte))) (set! total (+ total pts)))))
(define (whenbad ep% gvn expcd msg) (and (when (member gvn default-results) (set! default-returns (cons (epart ep% "" #t) default-returns))) (when (or (not (member gvn default-results)) (<= (length default-returns) show-defaults)) (bad-res ep% gvn expcd msg))))
(define (bad-res ep% gvn expcd msg) (p (if prepend "+0.0:" (format "~a[--]" (p-n-ex))) (epart ep% "la " #f) 'rezultatul gvn msg expcd))
(define (check-conds e gvn conds) (or (null? conds) (let ([r ((car conds) gvn)]) (if (eq? r #t) (check-conds e gvn (cdr conds)) (whenbad e gvn "" (or r "nu îndeplinește condițiile (completitudine, stabilitate)"))))))
(define (check-part part per given main-test expected . conds) (let* ([e (list n-ex part per)] [p? (pair? (cdr main-test))] [p (if p? (car main-test) identity)] [t ((if p? cadr car) main-test)] [m ((if p? cddr cdr) main-test)]) (when (eq? #t (check-conds e given conds)) (if (t (p given) expected) (whengood e) (whenbad e (p given) expected m)))))
(define (check given main-test expected . conds) (apply check-part '- 1 given main-test expected conds))
(define the cons) (define is (cons equal? "diferă de cel așteptat")) (define in (cons member "nu se află printre variantele așteptate"))
(define same-set-as (cons (λ (x y) (apply equal? (map list->seteqv (list x y)))) "nu este aceeași mulțime cu"))
(define same-unique (cons (λ (x y) (and (apply = (map length (list x y))) ((car same-set-as) x y))) "nu sunt aceleași rezultate cu"))
(define (sumar) (when (and (not (null? default-returns)) (< show-defaults (length default-returns))) (p "... rezultatul implicit dat la" (cadr name-ex) (reverse default-returns))) (when (not nopoints) (p 'total: total 'puncte)))
(define (mark-helper) (printf "---~nEx  puncte    Total până aici~n") (foldr (λ (e-p t) (p (car e-p) ': (cadr e-p) "puncte. total 1 -" (car e-p) ': (+ t (cadr e-p))) (+ t (cadr e-p))) 0 all) (newline))


; Testele încep de aici.
(sunt 8 exerciții)

(exercițiul 1 : 15 puncte)
(check-part 'a (/ 1 10) (null? empty-ph) is #t)
(check-part 'b (/ 1 10) (and (procedure? val->ph) (val->ph 3)) is '(3))
(check-part 'c (/ 1 10) (and (procedure? ph-empty?) (ph-empty? empty-ph)) is #t)
(check-part 'd (/ 1 10) (or (not (procedure? ph-empty?)) (ph-empty? '(3))) is #f)
(check-part 'e (/ 1 10) (and (procedure? val->ph) (ph-root (val->ph 5))) is 5)
(check-part 'f (/ 1 10) (ph-root '(3 (2) (1 (0)))) is 3)
(check-part 'g (/ 1 10) (ph-root empty-ph) is #f)
(check-part 'h (/ 1 10) (ph-subtrees '(3 (2) (1 (0)))) is '((2) (1 (0))))
(check-part 'i (/ 1 10) (and (procedure? val->ph) (ph-subtrees (val->ph 4))) is '())
(check-part 'j (/ 1 10) (ph-subtrees empty-ph) is #f)

(exercițiul 2 : 15 puncte)
(check-part 'a (/ 1 15) (merge '() '()) is '())
(check-part 'b (/ 1 15) (merge '() '(4)) is '(4))
(check-part 'c (/ 1 15) (merge '(7 (1)) '()) is '(7 (1)))
(check-part 'd (/ 1 5) (merge '(7 (1) (3)) '(4)) is '(7 (4) (1) (3)))
(check-part 'e (/ 1 5) (merge '(8 (5 (4)) 7) '(9 (3) (6))) is '(9 (8 (5 (4)) 7) (3) (6)))
(check-part 'f (/ 1 5) (merge '(5 (1)) '(5 (4) (4))) is '(5 (5 (4) (4)) (1)))
(check-part 'g (/ 1 5) (merge '(5 (4) (4)) '(5 (1))) is '(5 (5 (1)) (4) (4)))

(exercițiul 3 : 10 puncte)
(check-part 'a (/ 1 10) (ph-insert 2 '()) is '(2))
(check-part 'b (/ 1 10) (ph-insert 1 '(4)) is '(4 (1)))
(check-part 'c (/ 1 5) (ph-insert 8 '(5 (2))) is '(8 (5 (2))))
(check-part 'd (/ 1 5) (ph-insert 7 '(9 (2) (4) (8))) is '(9 (7) (2) (4) (8)))
(check-part 'e (/ 1 5) (ph-insert 10 '(5 (4 (2)) (3))) is '(10 (5 (4 (2)) (3))))
(check-part 'f (/ 1 5) (ph-insert 9 '(9 (7) (3))) is '(9 (9) (7) (3)))

(exercițiul 4 : 10 puncte)
(check-part 'a (/ 1 10) (list->ph '()) is '())
(check-part 'b (/ 1 10) (list->ph '(7)) is '(7))
(check-part 'd (/ 1 5) (list->ph '(7 6 5 4 3 2 1)) is '(7 (6 (5 (4 (3 (2 (1))))))))
(check-part 'e (/ 1 5) (list->ph '(1 2 3 4 5 6 7)) is '(7 (1) (2) (3) (4) (5) (6)))
(check-part 'f (/ 1 5) (list->ph '(9 6 10 7 8 5 2 4 3 1)) is '(10 (9) (6) (8 (7) (5 (4 (2) (3 (1)))))))
(check-part 'g (/ 1 5) (list->ph '(9 5 11 3 8 5 2 5 3 1)) is '(11 (9) (5) (8 (3) (5 (5) (2) (3 (1))))))

(exercițiul 5 : 20 puncte)
(check-part 'a (/ 1 15) (two-pass-merge-LR '()) is '())
(check-part 'b (/ 1 15) (two-pass-merge-LR '((5 (4)))) is '(5 (4)))
(check-part 'c (/ 1 15) (two-pass-merge-LR '((8 (3)) (7 (2)))) is '(8 (7 (2)) (3)))
(check-part 'd (/ 1 15) (two-pass-merge-LR '((2) (8) (4 (1)) (9))) is '(9 (8 (2)) (4 (1))))
(check-part 'e (/ 1 15) (two-pass-merge-LR '((4 (3))
                                             (10 (6) (6 (5)))
                                             (8 (2))))
            is '(10 (8 (2)) (4 (3)) (6) (6 (5))))
(check-part 'f (/ 1 15) (two-pass-merge-LR '((6 (2))
                                             ()
                                             (4 (4 (1)))
                                             (8 (3 (2) (3)))
                                             (9)))
            is '(9 (8 (6 (2)) (4 (4 (1))) (3 (2) (3)))))
(check-part 'g (/ 1 15) (two-pass-merge-LR '((15 (7) (12))
                                             (8)
                                             (11 (7))
                                             (13 (8) (3) (2))
                                             (11 (2) (6) (10) (7))
                                             (9 (0))))
            is '(15 (11 (9 (0)) (2) (6) (10) (7)) (13 (11 (7)) (8) (3) (2)) (8) (7) (12)))
(check-part 'h (/ 1 15) (two-pass-merge-LR '((79 (61) (11)) (42 (37)) (74 (9) (69 (5)))
                                                            (19) (65 (20) (37)) (77)
                                                            (98 (64 (27) (48))) (91) (0)))
            is '(98 (0) (79 (77 (65 (20) (37))) (74 (19) (9) (69 (5))) (42 (37)) (61) (11)) (91) (64 (27) (48))))
(check-part 'i (/ 1 15) (two-pass-merge-LR '((60) (86 (80) (20)) (46 (1)) (58) (73 (53 (0)))
                                                  (85) (38) (73 (34) (22)) (58 (24)) (53)
                                                  (87 (16)) (91 (35) (11)) (93 (49 (18))) (48)
                                                  (73 (49))))
            is '(93 (73 (49)) (91 (86 (58 (53) (24)) (73 (38) (34) (22)) (85 (73 (53 (0))))
                                      (58 (46 (1))) (60) (80) (20)) (87 (16)) (35) (11)) (48) (49 (18))))
(check-part 'j (/ 1 15) (two-pass-merge-LR '((84 (3)) (87) (5) (92 (21 (12))) (53 (43 (3))) (54 (35))
                                                      (51 (33) (36)) (24 (12) (6)) (75 (7)) (36)
                                                      (75 (49 (20))) (63) (40) (31) (83 (16)) (85 (26) (24))
                                                      (23) (15) (44 (40 (35))) (89)))
            is '(92 (89 (44 (40 (35)))) (23 (15)) (85 (83 (16)) (26) (24)) (40 (31)) (75 (63) (49 (20)))
                    (75 (36) (7)) (51 (24 (12) (6)) (33) (36)) (54 (53 (43 (3))) (35)) (87 (84 (3))) (5)
                    (21 (12))))
(check-part 'k (/ 1 15) (two-pass-merge-LR '((6) (8 (0)) (8))) is '(8 (8) (6) (0)))
(check-part 'l (/ 1 15) (two-pass-merge-LR '((10 (9) (5)) () (10 (6)) (5 (1)))) is '(10 (10 (5 (1)) (6)) (9) (5)))
(check-part 'm (/ 1 15) (two-pass-merge-LR '((37) (47 (32)) (33) (22 (21)) (42 (26) (30)) (47 (27) (46 (38)))))
            is '(47 (47 (42 (26) (30)) (27) (46 (38))) (33 (22 (21))) (37) (32)))
(check-part 'n (/ 1 15) (two-pass-merge-LR '((26) (30 (25) (24) (12)) (22) (25 (1)) (20 (18) (17) (3))
                                                  (29 (17)) (30 (21)) (28 (8))))
            is '(30 (30 (28 (8)) (21)) (29 (20 (18) (17) (3)) (17)) (25 (22) (1)) (26) (25) (24) (12)))
(check-part 'o (/ 1 15) (two-pass-merge-LR '((22 (11) (8) (0) (21)) (39 (35)) (9 (4)) (22 (6) (1) (14)) (23 (1))
                                                                    (39 (2) (13)) (24 (1) (15) (23)) (32 (12) (5))
                                                                    (36) (25 (19) (11)) (34)))
            is '(39 (34) (36 (25 (19) (11))) (32 (24 (1) (15) (23)) (12) (5))
                    (39 (23 (1)) (2) (13)) (22 (9 (4)) (6) (1) (14)) (22 (11) (8) (0) (21)) (35)))

(exercițiul 6 : 20 puncte)
(check-part 'a (/ 1 15) (two-pass-merge-RL '()) is '())
(check-part 'b (/ 1 15) (two-pass-merge-RL '((5 (4)))) is '(5 (4)))
(check-part 'c (/ 1 15) (two-pass-merge-RL '((8 (3)) (7 (2)))) is '(8 (7 (2)) (3)))
(check-part 'd (/ 1 15) (two-pass-merge-RL '((2) (8) (4 (1)) (9))) is '(9 (8 (2)) (4 (1))))
(check-part 'e (/ 1 15) (two-pass-merge-RL '((4 (3))
                                             (10 (6) (6 (5)))
                                             (8 (2))))
            is '(10 (4 (3)) (8 (2)) (6) (6 (5))))
(check-part 'f (/ 1 15) (two-pass-merge-RL '((6 (2))
                                             ()
                                             (4 (4 (1)))
                                             (8 (3 (2) (3)))
                                             (9)))
            is '(9 (6 (2)) (4 (4 (1))) (8 (3 (2) (3)))))
(check-part 'g (/ 1 15) (two-pass-merge-RL '((15 (7) (12))
                                             (8)
                                             (11 (7))
                                             (13 (8) (3) (2))
                                             (11 (2) (6) (10) (7))
                                             (9 (0))))
            is '(15 (13 (11 (9 (0)) (2) (6) (10) (7)) (11 (7)) (8) (3) (2)) (8) (7) (12)))
(check-part 'h (/ 1 15) (two-pass-merge-RL '((43) (94) (65 (63 (43))) (27) (39) (92 (61))
                                                  (81 (23) (80)) (64) (99) (95 (87)) (94 (94 (27)))))
            is '(99 (43) (94 (65 (63 (43)))) (39 (27)) (92 (81 (23) (80)) (61))
                    (95 (94 (94 (27))) (87)) (64)))
(check-part 'i (/ 1 15) (two-pass-merge-RL '((75 (61) (70) (50)) (73) (86 (15) (84)) (97 (0) (73) (58))
                                                                 (99) (81 (51) (17)) (97 (95) (83) (56))
                                                                 (61 (24 (7))) (94 (41)) (32 (30) (21) (6))
                                                                 (16) (14) (99 (60) (7)) (55 (49) (19) (42)) (0) (75)))
            is '(99 (75 (73) (61) (70) (50)) (97 (86 (15) (84)) (0) (73) (58)) (99 (81 (51) (17)))
                    (97 (61 (24 (7))) (95) (83) (56)) (94 (32 (30) (21) (6)) (41)) (16 (14)) (75 (0))
                    (55 (49) (19) (42)) (60) (7)))
(check-part 'j (/ 1 15) (two-pass-merge-RL
                         '((69) (29) (86 (37)) (67) (33 (7)) (51 (48)) (75) (76 (63)) (23) (96 (89))
                                (14 (3)) (94) (86) (39 (35)) (68) (39 (17)) (16 (4)) (82 (0)) (52) (24 (13))))
            is '(96 (69 (29)) (86 (67) (37)) (51 (33 (7)) (48)) (76 (75) (63))
                    (94 (86 (82 (68 (39 (17))) (52 (24 (13))) (16 (4)) (0)) (39 (35))) (14 (3))) (23) (89)))
(check-part 'k (/ 1 15) (two-pass-merge-RL '((8) (8 (4)) (2))) is '(8 (8) (2) (4)))
(check-part 'l (/ 1 15) (two-pass-merge-RL '((6 (5 (1))) (8 (7)) () (8 (4)))) is '(8 (8 (6 (5 (1))) (7)) (4)))
(check-part 'm (/ 1 15) (two-pass-merge-RL '((11 (4)) (4) (13 (2) (1) (7)) (9) (9 (5) (8)) (13)))
            is '(13 (11 (4) (4)) (13 (9) (2) (1) (7)) (9 (5) (8))))
(check-part 'n (/ 1 15) (two-pass-merge-RL '((36 (9) (27) (27) (3)) (37) (7 (1)) (35 (7) (26) (4 (4))) (34 (14))
                                                                    (37 (33) (37) (9)) (26 (1) (18) (25))))
            is '(37 (36 (9) (27) (27) (3)) (37 (7 (1))) (35 (34 (14)) (7) (26) (4 (4)))
                    (26 (1) (18) (25)) (33) (37) (9)))
(check-part 'o (/ 1 15) (two-pass-merge-RL '((37 (27 (14) (4))) (40) (25 (15)) (12) (35 (14) (22) (3)) (1)
                                                                (37 (32 (26) (31) (31))) (38 (34) (33) (18) (21))
                                                                (38 (34 (8 (7) (3)))) (23 (21)) (15) (28 (24) (22))))
            is '(40 (38 (25 (12) (15)) (35 (1) (14) (22) (3))
                        (38 (37 (32 (26) (31) (31))) (34) (33) (18) (21)) (28 (15) (24) (22))
                        (23 (21)) (34 (8 (7) (3)))) (37 (27 (14) (4)))))

(exercițiul 7 : 20 puncte)
(check-part 'a (/ 1 10) (tournament-merge '()) is '())
(check-part 'b (/ 1 10) (tournament-merge '((3 (2) (1)))) is '(3 (2) (1)))
(check-part 'c (/ 1 10) (tournament-merge '((4) (5 (3) (2)))) is '(5 (4) (3) (2)))
(check-part 'd (/ 1 10) (tournament-merge '((87)
                                            (31 (10))
                                            (83 (11))
                                            (86 (12))
                                            ()
                                            (92)
                                            (66)))
            is '(92 (87 (86 (83 (11)) (12)) (31 (10))) (66)))
(check-part 'e (/ 1 10) (tournament-merge '((50) (61 (41) (14)) (64) (54) (32)
                                                 (4) (86 (26)) (37 (34 (23)))))
            is '(86 (64 (61 (50) (41) (14)) (54)) (32 (4)) (37 (34 (23))) (26)))
(check-part 'f (/ 1 10) (tournament-merge '((3 (2))
                                            (6)
                                            (16)
                                            (14 (9))
                                            (6)
                                            (20)
                                            (15 (1) (7))))
            is '(20 (16 (6 (3 (2))) (14 (9))) (15 (1) (7)) (6)))
(check-part 'g (/ 1 10) (tournament-merge '((28 (12))
                                            (21)
                                            (33)
                                            (40 (38))
                                            (9 (9))
                                            (15)
                                            (39 (23))
                                            (30 (29) (22))))
            is '(40 (39 (15 (9 (9))) (30 (29) (22)) (23)) (28 (21) (12)) (33) (38)))
(check-part 'h (/ 1 10) (tournament-merge '((37)
                                            (70 (21) (65))
                                            (63 (39) (10) (40))
                                            (25 (24) (22))
                                            (95 (93))
                                            (31 (23))
                                            (82 (68) (37))))
            is '(95 (70 (63 (25 (24) (22)) (39) (10) (40)) (37) (21) (65)) (82 (68) (37)) (31 (23)) (93)))
(check-part 'i (/ 1 10) (tournament-merge '((0)
                                            (64 (28) (2) (38))
                                            (71 (61 (32)))
                                            (87 (28) (13))
                                            (96 (72 (17) (26)))
                                            (10)
                                            (67 (6))
                                            (89 (80))
                                            (9)
                                            (28 (1) (0))))
            is '(96 (28 (9) (1) (0)) (87 (64 (0) (28) (2) (38)) (71 (61 (32))) (28) (13)) (89 (67 (6)) (80)) (10) (72 (17) (26))))
(check-part 'j (/ 1 10) (tournament-merge '((91 (43)) (55 (14)) (50) (68) (59) (80 (1))
                                                      (44 (38)) (30) (17) (77 (4)) (80 (66)) (84)
                                                      (67 (1)) (77 (22)) (99 (55)) (35) (49) (47 (47))))
            is '(99 (49 (47 (47))) (91 (80 (44 (30) (38)) (59) (1)) (68 (50)) (55 (14)) (43)) (84 (77 (17) (4)) (80 (66))) (77 (67 (1)) (22)) (35) (55)))

(exercițiul 8 : 10 puncte)
(check-part 'a (/ 1 5) (ph-del-root '()) is #f)
(check-part 'b (/ 1 5) (ph-del-root '(3)) is '())
(check-part 'c (/ 1 5) (ph-del-root '(3 (2) (1))) is '(2 (1)))
(check-part 'd (/ 1 5) (ph-del-root '(70 (4 (3)) (10 (6) (6 (5))) (8 (2)))) is '(10 (8 (2)) (4 (3)) (6) (6 (5))))
(check-part 'e (/ 1 5) (ph-del-root '(80 (15 (7) (12))
                                         (8)
                                         (11 (7))
                                         (13 (8) (3) (2))
                                         (11 (2) (6) (10) (7))
                                         (9 (0))))
            is '(15 (11 (9 (0)) (2) (6) (10) (7)) (13 (11 (7)) (8) (3) (2)) (8) (7) (12)))

(sumar)
